{"version":3,"sources":["resources/uknowlogo.png","engine/uno.js","Player.js","Card.js","Hand.js","constants.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","mod","a","n","UnoGame","n_players","hand_size","this","parseInt","player_hands","top_card","newCard","color","i","push","newHand","isForward","current_pid","current_hasDrawn","win_listeners","players","hands","top","current_player","has_drawn","is_forward","state","value","toString","numCards","Array","fill","map","whoNext","as","length","card","new_color","some","c","result","placeCard","nextPlayer","new_card","removeCard","addCards","cardId","findIndex","splice","nCards","next","winning_pid","hand","alertWin","forEach","listener","Player","props","useState","link","setLink","getLinkFromCatAPI","axios","url","method","timeout","responseType","response","console","log","data","useEffect","setTimeout","className","src","player","username","games_started","games_won","Card","isFlipped","smaller","String","toUpperCase","onClick","e","preventDefault","onTouch","Hand","asplayer","game","getGameState","JSON","stringify","onPlace","cards","show","orientationStyle","isVertical","maxWidth","maxHeight","overflowX","overflowY","display","flexDirection","style","DOMAIN_NAME","CONSTANTS","Deck","onDraw","Game","message","setMessage","setC","wildcolor","React","useRef","refresh","willWait","lobby","loadGameState","showMessage","msg","pushUpdate","isMyTurn","try","current","draw","onSkip","skip","htmlFor","name","ref","HTTP_TIMEOUT","LoginPage","logo","height","LoginForm","onToken","isLogin","setIsLogin","errorMessage","setErrorMessage","password","handleLogin","loginData","token","expiration","handleSignup","onSubmit","type","id","required","ConfigureGame","num_players","createlobby","joinlobby","numPlayers","setNumPlayers","handSize","setHandSize","updateNumPlayers","rade","target","updateHandSize","handleCreateGame","buttone","onConfig","isCreate","handleJoinGame","onChange","pattern","App","session","setSession","setPlayers","Date","now","retrieved","handleConfiguration","properties","configurable","creator","numplayers","result2","refreshPlayers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa88bd49.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/uknowlogo.2a81a389.png\";","const getRandomInt = (min, max) => { // all inclusive\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst mod = (a, n) => ((a % n ) + n ) % n;\r\n\r\nexport class UnoGame {\r\n    constructor (n_players = 2, hand_size = 7) {\r\n        this.n_players = parseInt(n_players, 10);\r\n        this.player_hands = [];\r\n        this.top_card = this.newCard();\r\n        while (this.top_card.color == \"black\") { // make sure not a black card\r\n            this.top_card = this.newCard();\r\n        }\r\n\r\n        for (let i = 0; i < n_players; i++) {\r\n            this.player_hands.push(this.newHand(hand_size));\r\n        }\r\n\r\n        this.isForward = true; // determine flow direction\r\n        this.current_pid = 0; // current player\r\n        this.current_hasDrawn = false;\r\n\r\n        // listeners\r\n        this.win_listeners = [];\r\n    }\r\n\r\n    getGameState() {\r\n        return {\r\n            players: this.n_players,\r\n            hands: this.player_hands,\r\n            top: this.top_card,\r\n            current_player: this.current_pid,\r\n            has_drawn: this.current_hasDrawn,\r\n            is_forward: this.isForward\r\n        }\r\n    }\r\n\r\n    loadGameState(state) {\r\n        this.n_players = state.players;\r\n        this.player_hands = state.hands;\r\n        this.top_card = state.top;\r\n        this.current_pid = state.current_player;\r\n        this.current_hasDrawn = state.has_drawn;\r\n        this.isForward = state.is_forward;\r\n    }\r\n\r\n    newCard() {\r\n        if (Math.random() < .04) { // make a black card\r\n            return {\r\n                color: \"black\",\r\n                value: (getRandomInt(0,1) == 0 ? \"wild\" : \"+4\" )\r\n            }\r\n        }\r\n\r\n        let value;\r\n        const random = getRandomInt(0,12);\r\n        switch (random) {\r\n            case 10:\r\n                value = \"+2\";\r\n                break;\r\n            case 11: \r\n                value = \"skip\";\r\n                break;\r\n            case 12:\r\n                value = \"reverse\";\r\n                break;\r\n            default:\r\n                value = random.toString();\r\n        }\r\n\r\n        let color;\r\n        switch (getRandomInt(1,4)) {\r\n            case 1:\r\n                color = \"red\";\r\n                break;\r\n            case 2:\r\n                color = \"green\";\r\n                break;\r\n            case 3:\r\n                color = \"yellow\";\r\n                break;\r\n            case 4:\r\n                color = \"blue\";\r\n                break;\r\n        }\r\n\r\n        return {color, value};\r\n    }\r\n\r\n    newHand(numCards) {\r\n        return Array(numCards).fill(null).map(() => this.newCard());\r\n    }\r\n\r\n    getCurrentHand() {\r\n        return this.player_hands[this.current_player];\r\n    }\r\n\r\n    whoNext() {\r\n        return this.isForward ? mod(this.current_pid+1, this.n_players) : mod(this.current_pid-1, this.n_players);\r\n    }\r\n\r\n    nextPlayer() {\r\n        this.current_hasDrawn = false;\r\n        this.current_pid = this.whoNext();\r\n        return this.current_pid;\r\n    }\r\n\r\n    /**\r\n     * Simple checker if asker's pid is the same as the current pid.\r\n     * Main purpose is to let client have more adaptive error handling.\r\n     * @param {Number} as - the player trying to do something\r\n     */\r\n    isMyTurn(as) {\r\n        return as === this.current_pid;\r\n    }\r\n\r\n    /**\r\n     * Will add a card to current player's deck and flagged that\r\n     * the current player has drawn a card.\r\n     * @param {Number} as - the player trying to draw (leaving it blank will skip check)\r\n     * @returns the new card drawn\r\n     */\r\n    draw(as = this.current_pid) {\r\n        if (as == this.current_pid) {\r\n            this.player_hands[this.current_pid].push(this.newCard());\r\n            this.current_hasDrawn = true;\r\n            return this.player_hands[this.current_pid][this.player_hands.length - 1];\r\n        } else {\r\n            return false; // cannot be drawn\r\n        }\r\n    }\r\n\r\n    /**\r\n     * tries to place the card described by checking the current player's deck\r\n     * for the card\r\n     * @param {Card} card - card to place on top\r\n     * @param {string} new_color - color to switch, necessary for wild cards\r\n     * @param {Number} as - the player trying to place (leaving it blank will skip check)\r\n     * @returns (false) if card is not found or cannot be placed\r\n     * @returns (true) if card is successfully placed and removed from deck\r\n     */\r\n    try(card, new_color, as = this.current_pid) {\r\n        if (as != this.current_pid || ! this.player_hands[this.current_pid].some((c) => card.color == c.color && card.value == c.value)) {\r\n            return false; // card does not exist in current hand\r\n        }                 // or as doesn't match\r\n\r\n        let result = this.placeCard(card, new_color);\r\n        return result // card cannot be placed\r\n        \r\n    }\r\n\r\n    /**\r\n     * Attempts to skip current player\r\n     * @param {Number} as - the player trying to draw (leaving it blank will skip check)\r\n     * @returns (true) - player has successfully skipped\r\n     * @returns (false) - player cannot skip as they haven't drawn yet\r\n     */\r\n    skip(as = this.current_pid) {\r\n        if (this.current_hasDrawn && as == this.current_pid) {\r\n            this.nextPlayer();\r\n            return true;\r\n        }\r\n        return false; // cannot skip!\r\n    }\r\n\r\n    /**\r\n     * @param {Number} pid - the current player \r\n     * @param {Card} new_card - the card the current player wants to place\r\n     * @param {String} new_color - the new color the current player wants to change to (required for black cards)\r\n     * @returns (false) - if card does not exist, (true) - if card exists and was removed\r\n     */\r\n    placeCard(new_card, new_color) { // returns true if able to be placed\r\n        // any card placed will be for current player\r\n\r\n        // wild/black card scenario\r\n        if (new_card.color == \"black\") {\r\n            this.top_card = {color: new_color, value: \"-1\"}; // change color\r\n            this.removeCard(new_card);\r\n            if (new_card.value == \"+4\") {\r\n                this.addCards(4);\r\n                this.nextPlayer(); // +4 has to skip too\r\n            }\r\n            this.nextPlayer();\r\n            return true;\r\n        }\r\n        \r\n        // check if card will fit\r\n        if (new_card.color == this.top_card.color || new_card.value == this.top_card.value) {\r\n            // +2 or skip or reverse checks\r\n            this.removeCard(new_card);\r\n            switch (new_card.value) {\r\n                case \"+2\":\r\n                    this.addCards(2);\r\n                    this.nextPlayer(); // +2 has to skip too\r\n                    break;\r\n                case \"reverse\":\r\n                    this.isForward = !this.isForward;\r\n                    break;\r\n                case \"skip\":\r\n                    this.nextPlayer(); // calls an extra time\r\n                    break;\r\n            }\r\n            this.nextPlayer();\r\n\r\n            this.top_card = new_card;\r\n            return true;\r\n\r\n        }\r\n\r\n        return false; // card cannot be placed\r\n    }\r\n\r\n    removeCard(card) {\r\n        let cardId = this.player_hands[this.current_pid].findIndex((c) => (c.color == card.color && c.value == card.value));\r\n        if (cardId == -1) {\r\n            return null; // card does not exist\r\n        }\r\n        return this.player_hands[this.current_pid].splice(cardId, 1)[0];\r\n    }\r\n\r\n    addCards(nCards) { // adds cards to next user\r\n        const next = this.whoNext();\r\n        for (let i = 0; i < nCards; i++) {\r\n            this.player_hands[next].push(this.newCard());\r\n        }\r\n        return;\r\n    }\r\n\r\n    checkWin() {\r\n        // a little in-efficient but it should work\r\n        const winning_pid = this.player_hands.findIndex((hand) => hand.length == 0);\r\n        if (winning_pid == -1) {\r\n            return; // no one won\r\n        } else {\r\n            this.alertWin(winning_pid);\r\n        }\r\n    }\r\n\r\n    alertWin(winning_pid) {\r\n        this.win_listeners.forEach((listener) => listener(winning_pid));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Function} listener - the listener must accept a winning_pid\r\n     */\r\n    addWinListener(listener) {\r\n        this.win_listeners.push(listener);\r\n    }\r\n}\r\n\r\n","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Player.css';\r\n\r\n/**\r\n *   Props:\r\n *   - imglink - optional (defaults to meo) \r\n *   - orientation - \"below\" | \"side\"\r\n *   - username\r\n */\r\nfunction Player (props) {\r\n    // gets a user's theme: 'light' --> unsplash, 'dark' --> cats\r\n    const [link, setLink] = useState(\"\");\r\n    const getLinkFromCatAPI = async () => {\r\n        try {\r\n            const response = await axios({\r\n                url: \"https://api.thecatapi.com/v1/images/search\",\r\n                method: \"get\",\r\n                timeout: 3000,\r\n                responseType: \"json\"\r\n            });\r\n            console.log(response.data[0].url);\r\n            return response.data[0].url;\r\n        } catch {\r\n            console.log(\"cat server down?!\");\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        setTimeout(async() => {\r\n            setLink(await getLinkFromCatAPI());\r\n        }, 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"player_profile\">\r\n            <img className=\"avatar\" src={link} />\r\n            <div>\r\n                <p className=\"stats\"><strong>{props.player.username}</strong></p>\r\n                <p className=\"stats\">Games Started: {props.player.games_started}</p>\r\n                <p className=\"stats\">Games Won: {props.player.games_won}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\n/**\r\n * #### Card\r\n * Props:\r\n * - card = {color, value} (ignored if isFlipped)\r\n * - isFlipped (optional)\r\n * - onTouch (optional) (ignored if isFlipped)\r\n * requires the color and value property\r\n * TODO optional size properties\r\n */\r\nfunction Card (props) { \r\n    if (props.isFlipped) {\r\n        return (\r\n            <div className={`card flipped ${props.className}`}>\r\n                <div className=\"inner red\"></div>\r\n                <p className=\"value uno_text\">U-KNOW</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleTouch = (e) => {\r\n        e.preventDefault(); // idk if I need this\r\n        if (props.onTouch) {\r\n            props.onTouch(props.card);\r\n        }\r\n    };\r\n\r\n    let smaller;\r\n    switch (props.card.value) {\r\n        case \"wild\":\r\n            smaller = \"smaller\";\r\n            break;\r\n        default:\r\n            smaller = \"\";\r\n    }\r\n\r\n    let value;\r\n    switch (props.card.value) {\r\n        case \"skip\":\r\n            value = '\\u00f8';\r\n            break;\r\n        case \"reverse\":\r\n            value = \"\\u2927\";\r\n            break;\r\n        case \"-1\":\r\n            value = \"?\"\r\n            break;\r\n        default:\r\n            value = props.card.value;\r\n    }\r\n\r\n    // why can't you call functions in html code?\r\n    value = String(value).toUpperCase();\r\n\r\n    return (\r\n        <div className={`card ${props.card.color} ${props.className}`} onClick={handleTouch}>\r\n            <div className=\"inner\"></div>\r\n            <p className={`value ${smaller}`}>{value}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Hand.css';\r\nimport Card from './Card.js';\r\nimport { findByLabelText } from '@testing-library/dom';\r\nimport axios from 'axios';\r\n\r\n/**\r\n *  A scrollable collection of cards.\r\n *  Takes in:\r\n *  - game\r\n *  - asplayer\r\n *  - show (clickable)\r\n *  - isVertical\r\n *  - onPlace - a callback function sent with the card pressed\r\n */\r\nfunction Hand(props) {\r\n    if (props.asplayer >= props.game.getGameState().hands.length) {\r\n        return (\r\n            <div className=\"hand_window\">\r\n                {`No player ${props.asplayer}.`}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const placeCard = (c) => {\r\n        console.log(`Player ${props.asplayer} placed card ${JSON.stringify(c)}`);\r\n        props.onPlace(c);\r\n    }\r\n\r\n    const hand = props.game.getGameState().hands[props.asplayer];\r\n    const cards = hand.map((card, i) => {\r\n        if (props.show) {\r\n            return <Card card={card} key={`card${props.asplayer}_${i}`} onTouch={placeCard} />;\r\n        } else {\r\n            return <Card isFlipped={true} key={`card${props.asplayer}_${i}`} />;\r\n        }\r\n    });\r\n\r\n    const orientationStyle = props.isVertical ? {\r\n        maxWidth: 100,\r\n        maxHeight: 600,\r\n        overflowX: \"hidden\",\r\n        overflowY: \"auto\"\r\n    }\r\n    :\r\n    {\r\n        maxWidth: 550,\r\n        maxHeight: 130,\r\n        overflowX: \"auto\",\r\n        overflowY: \"hidden\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n    };\r\n\r\n    return (\r\n        <div className=\"hand_window\" style={orientationStyle}>\r\n            {cards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hand;","export const DOMAIN_NAME = \"https://kekevi.pythonanywhere.com\";\r\nexport const HTTP_TIMEOUT = 3000;\r\nexport const CORS_SITE = \"https://kekevi.pythonanywhere.com\";\r\n","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport Hand from './Hand.js';\r\nimport Player from './Player.js';\r\nimport Card from './Card.js';\r\nimport './Game.css';\r\nimport * as CONSTANTS from './constants.js';\r\n\r\nconst DOMAIN_NAME = CONSTANTS.DOMAIN_NAME;\r\nconst HTTP_TIMEOUT = CONSTANTS.HTTP_TIMEOUT;\r\nconst CORS_SITE = CONSTANTS.CORS_SITE;\r\n\r\nfunction Game (props) {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [c, setC] = useState({game: props.game});\r\n    const wildcolor = React.useRef(null);\r\n\r\n    const refresh = async (willWait) => {\r\n        // if (willWait) {\r\n        //     setTimeout(async () => {\r\n        //         try {\r\n        //             const response = await axios({\r\n        //                 url: `${DOMAIN_NAME}/game/${props.lobby}`,\r\n        //                 method: \"get\",\r\n        //                 timeout: HTTP_TIMEOUT,\r\n        //                 responseType: \"json\"\r\n        //             });\r\n        //             c.game.loadGameState(response.data);\r\n        //             setC({game: c.game});\r\n        //         } catch {\r\n        //             console.log(\"error refreshing\");\r\n        //         }\r\n        //         console.log(\"am waiting\");\r\n        //         refresh(true);\r\n        //     }, 4000);\r\n        // }\r\n        try {\r\n            const response = await axios({\r\n                url: `${DOMAIN_NAME}/game/${props.lobby}`,\r\n                method: \"get\",\r\n                timeout: HTTP_TIMEOUT,\r\n                responseType: \"json\"\r\n            });\r\n            c.game.loadGameState(response.data);\r\n            setC({game: c.game});\r\n        } catch {\r\n            console.log(\"error refreshing\");\r\n        }\r\n        console.log(\"am waiting\");\r\n    }\r\n\r\n    function showMessage(msg) {\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 3000);\r\n        setMessage(msg);\r\n        return;\r\n    }\r\n\r\n    const pushUpdate = async () => {\r\n        try {\r\n            const result = await axios({\r\n                url: `${DOMAIN_NAME}/game/${props.lobby}`,\r\n                method: \"put\",\r\n                data: {\r\n                    data: JSON.stringify(c.game.getGameState())\r\n                },\r\n                timeout: HTTP_TIMEOUT,\r\n                responseType: \"json\"\r\n            });\r\n            refresh();\r\n        } catch {\r\n            // timed out, bad request?\r\n        }\r\n    }\r\n\r\n    const placeCard = async (card) => {\r\n        if (!c.game.isMyTurn(props.asplayer)) {\r\n            showMessage(\"It's not your turn!\");\r\n        }\r\n\r\n        if (c.game.try(card, wildcolor.current.value, props.asplayer) ) {\r\n            // axios updateGame\r\n            pushUpdate();\r\n        } else {\r\n            setMessage(\"Card doesn't match!\");\r\n        }\r\n    }\r\n\r\n    const onDraw = async () => {\r\n        if (c.game.draw(props.asplayer)) {\r\n            pushUpdate();\r\n        } else {\r\n            showMessage(\"It's not your turn!\");\r\n        }\r\n    }\r\n\r\n    const onSkip = async () => {\r\n        if (c.game.skip(props.asplayer)) {\r\n            pushUpdate();\r\n        } else {\r\n            showMessage(\"It's not your turn!\");\r\n        }\r\n        console.log(c.game.getGameState());\r\n    }\r\n\r\n    return (\r\n        <div className=\"App game\">\r\n            <div className=\"rows\">\r\n                <div className=\"row_side\">\r\n                    <Hand game={c.game} asplayer={2} show={props.asplayer==2} isVertical={false} onPlace={placeCard}/>\r\n                </div>\r\n                <div className=\"row_center\">\r\n                    <div className=\"spacer\"></div>\r\n                    <Hand game={c.game} asplayer={3} show={props.asplayer==3} isVertical={true} onPlace={placeCard}/>\r\n                    <div>\r\n                        <div className=\"game_center\">\r\n                            <div className=\"direction_indicator\">{c.game.getGameState().is_forward ? '\\u2b6f' : '\\u2b6e'}</div>\r\n                            <Deck onDraw={onDraw} />\r\n                            <Card card={c.game.getGameState().top} />\r\n                            <div className=\"individual_options\" >\r\n                                <button onClick={onSkip}>Next Turn</button>\r\n                                <button onClick={refresh}>Refresh</button>\r\n                                <div>\r\n                                    <label htmlFor=\"wildcolor\">Wild Card Color:</label>\r\n                                    <select className=\"wildcolor\" name=\"wildcolor\" ref={wildcolor}>\r\n                                        <option value=\"red\" className=\"red\">Red</option>\r\n                                        <option value=\"blue\" className=\"blue\">Blue</option>\r\n                                        <option value=\"green\" className=\"green\">Green</option>\r\n                                        <option value=\"yellow\" className=\"yellow\">Yellow</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>                      \r\n                        </div>\r\n                        <p className=\"game_error\">\r\n                            {message}\r\n                        </p>\r\n                        <p className=\"disclaimer\">\r\n                            Note: Normally it has an auto-refresh but for now you have to press \r\n                            refresh after other people move because I do not want\r\n                            to pay for Heroku.\r\n                        </p>\r\n                    </div>\r\n                    <Hand game={c.game} asplayer={1} show={props.asplayer==1} isVertical={true} onPlace={placeCard}/>\r\n                    <div className=\"spacer\"></div>\r\n                </div>\r\n                <div className=\"row_side\">\r\n                    <Hand game={c.game} asplayer={0} show={props.asplayer==0} isVertical={false} onPlace={placeCard}/>\r\n                </div>\r\n                <div className=\"fun_facts\">\r\n                    {/* {props.asplayer} */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Deck(props) {\r\n    // on click, call a game update to add a new card\r\n    const callDraw = () => {\r\n        console.log(\"hello\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"deck\" onClick={props.onDraw}>\r\n            <Card className=\"deck_card\" isFlipped={true} />\r\n            <Card className=\"deck_card_higher\" isFlipped={true} />\r\n            <Card className=\"deck_card_highest\" isFlipped={true} />\r\n            <div className=\"deck_tooltip\">\r\n                <p className=\"deck_tooltiptext\">\r\n                    Draw a new card! \r\n                    <span className=\"minortext\"> You must do this if you have no matching cards!</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import logo from './resources/uknowlogo.png';\r\nimport './App.css';\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport axios from 'axios';\r\nimport {UnoGame} from './engine/uno.js';\r\nimport Player from './Player.js';\r\nimport './Card.css';\r\nimport Game from './Game.js';\r\nimport * as CONSTANTS from './constants.js';\r\n\r\nconst DOMAIN_NAME = CONSTANTS.DOMAIN_NAME;\r\nconst HTTP_TIMEOUT = CONSTANTS.HTTP_TIMEOUT;\r\nconst CORS_SITE = CONSTANTS.CORS_SITE;\r\n\r\n\r\nfunction App() {\r\n    const [session, setSession] = useState({\r\n        token: \"token on refresh\",\r\n        expiration: 1 // in seconds\r\n    });\r\n    const [c, setC] = useState({game: null, asplayer: null, lobby: null});\r\n    const [message, setMessage] = useState(\"\");\r\n    const [players, setPlayers] = useState([]);\r\n\r\n    const handleTokenRetrieval = (retrieved) => {\r\n        setSession(retrieved);\r\n    };\r\n\r\n    if (session.expiration < Date.now() / 1000) { // is expired\r\n        return <LoginPage onToken={handleTokenRetrieval}/>;\r\n    }\r\n\r\n    let game;\r\n    let asplayer;\r\n\r\n    // I am not sure if try catch will work, axios may not throw exception\r\n    // and instead just record result as a failure\r\n    const handleConfiguration = async (properties) => {\r\n        let configurable = true;\r\n\r\n        if (properties.isCreate) { // Creating a game...\r\n            game = new UnoGame(parseInt(properties.num_players, 10), parseInt(properties.hand_size, 10));\r\n            asplayer = 0;\r\n            // POST new game's state to server w/ room code\r\n            try {\r\n                const result = await axios({\r\n                    url: `${DOMAIN_NAME}/game/create`,\r\n                    //headers: {\"Access-Control-Allow-Origin\": `${CORS_SITE}`},\r\n                    method: \"post\",\r\n                    data: {\r\n                        creator: session.token,\r\n                        lobby: properties.lobby,\r\n                        data: JSON.stringify(game.getGameState()),\r\n                        numplayers: properties.num_players\r\n                    },\r\n                    timeout: HTTP_TIMEOUT,\r\n                    responseType: \"json\"\r\n                });\r\n                \r\n                //console.log(result.data);\r\n            } catch {\r\n                configurable = false;\r\n            }\r\n\r\n        } else { // Joining a game\r\n            game = new UnoGame();\r\n            \r\n            try {\r\n                // GET all players already in the lobby to get asplayer\r\n                const result = await axios({\r\n                    url: `${DOMAIN_NAME}/game/players/${properties.lobby}`,\r\n                    //headers: {\"Access-Control-Allow-Origin\": `${CORS_SITE}`},\r\n                    method: \"get\",\r\n                    timeout: HTTP_TIMEOUT,\r\n                    responseType: \"json\"\r\n                });\r\n\r\n                asplayer = result.data.length;\r\n\r\n                // POST the player to the game\r\n                const result2 = await axios({\r\n                    url: `${DOMAIN_NAME}/game/${properties.lobby}`,\r\n                    method: \"post\",\r\n                    data: {\r\n                        token: session.token,\r\n                        asplayer: asplayer\r\n                    },\r\n                    timeout: HTTP_TIMEOUT,\r\n                    responseType: \"json\"\r\n                });\r\n                \r\n                game.loadGameState(result2.data.data);\r\n\r\n                console.log(game.getGameState());\r\n                \r\n                // start refresh as it waits for own turn:\r\n                \r\n            } catch {\r\n                // console.log(result.statusText);\r\n                configurable = false;\r\n            }\r\n        }\r\n\r\n        if (configurable) {\r\n            setC({game, asplayer, lobby: properties.lobby});\r\n        } else {\r\n            setMessage(\"An error has occured. Make sure the lobby exists.\")\r\n        }\r\n    }\r\n\r\n    if (c.game == null) {\r\n        return (\r\n            <div className=\"App configure login\">\r\n                <div className=\"center\">\r\n                    <h3>Create or join a game!</h3>\r\n                    <ConfigureGame onConfig={handleConfiguration}/>\r\n                    <p>{message}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const refreshPlayers = async () => {\r\n        const result = await axios({\r\n            url: `${DOMAIN_NAME}/game/players/${c.lobby}`,\r\n            method: \"get\",\r\n            timeout: HTTP_TIMEOUT,\r\n            responseType: \"json\"\r\n        });\r\n        const players = result.data;\r\n        console.log(players);\r\n        setPlayers(players.map((player) => {\r\n            return <Player player={player} key={player.username}/>;\r\n        }));\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"full\">\r\n            <div className=\"headbar\">\r\n                <div className=\"playerlist\">\r\n                    <div className=\"playerlist_list\">\r\n                        <button className=\"button_refresh\" onClick={refreshPlayers}>Refresh Player List</button>\r\n                        <div className=\"playerlist_list\">{players}</div>\r\n                    </div>\r\n            </div>\r\n            </div>\r\n            <Game game={c.game} asplayer={c.asplayer} lobby={c.lobby}/>\r\n            <div className=\"tailbar\">\r\n                <p>Made by Kevin Chen</p>\r\n                <p>Ripoff of Hasbro's Uno</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LoginPage(props) {\r\n    return (\r\n      <div className=\"App login\">\r\n        <div className=\"center\">\r\n          <img className=\"logo\" src={logo} height={80}/>\r\n          <p className=\"login_desc\">\r\n            A <em>very</em> familiar card game. Designed for UNC's COMP 426 Final Project by Kevin Chen (kekevi).\r\n          </p>\r\n          <p className=\"login_desc\">\r\n            Note: Do NOT enter any real passwords below. Passwords in the database \r\n            are encrypted using SHA256 implemented by Python's secrets library, but \r\n            in the HTTP request they are NOT encrypted. I have not yet taken COMP 435/535 yet!\r\n          </p>\r\n          <h3>Login or signup below!</h3>\r\n          <LoginForm onToken={props.onToken}/>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n  \r\nfunction LoginForm(props) {\r\n    const [isLogin, setIsLogin] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const username = React.useRef(null);\r\n    const password = React.useRef(null);\r\n\r\n    const toggleLogin = () => {\r\n        if (isLogin) {\r\n        setIsLogin(false);\r\n        } else {\r\n        setIsLogin(true);\r\n        }\r\n    }\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        const loginData = {\r\n        username: username.current.value,\r\n        password: password.current.value\r\n        };\r\n\r\n        // skip login: (TODO remove in final)\r\n        if (loginData.username == \"skip\") {\r\n            props.onToken({\r\n                token: \"fake\",\r\n                expiration: 19999999999 // in seconds\r\n            })\r\n        }\r\n\r\n        try {\r\n        const result = await axios({\r\n            url: `${DOMAIN_NAME}/login`,\r\n            //headers: {\"Access-Control-Allow-Origin\": `${CORS_SITE}`},\r\n            method: \"post\",\r\n            data: loginData,\r\n            timeout: HTTP_TIMEOUT,\r\n            responseType: \"json\"\r\n        });\r\n        props.onToken(result.data);\r\n        } catch {\r\n        setErrorMessage(\"Invalid credentials, check username and password.\");\r\n        }\r\n    }\r\n\r\n    const handleSignup = async (e) => {\r\n        e.preventDefault();\r\n        const loginData = {\r\n            username: username.current.value,\r\n            password: password.current.value\r\n        };\r\n        try {\r\n            const result = await axios({\r\n                url: `${DOMAIN_NAME}/signup`,\r\n                //headers: {\"Access-Control-Allow-Origin\": `${CORS_SITE}`},\r\n                method: \"post\",\r\n                data: loginData,\r\n                timeout: HTTP_TIMEOUT,\r\n                responseType: \"json\"\r\n            });\r\n        props.onToken(result.data);\r\n        } catch {\r\n            setErrorMessage(\"Username might be taken. Either log in or choose a new username.\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"login_form\" onSubmit={isLogin ? handleLogin : handleSignup}>\r\n        <div className=\"login_input\">\r\n            <label htmlFor=\"username\">Username: </label>\r\n            <input ref={username} type=\"text\" id=\"username\" name=\"username\" required/>\r\n        </div>\r\n        <div className=\"login_input\">\r\n            <label htmlFor=\"password\">Password: </label>\r\n            <input ref={password} type=\"password\" id=\"password\" name=\"password\" required />\r\n        </div>\r\n        <div className=\"login_buttons\">\r\n            <button className=\"button action\" type= \"button\" onClick={toggleLogin}>{isLogin ? \"Sign Up Instead\" : \"Login Instead\"}</button>\r\n            <button className=\"button_submit\" type=\"submit\">{isLogin ? \"Login\" : \"Sign Up\"}</button>\r\n        </div>\r\n        {errorMessage == \"\" ? \"\": <div className=\"login_errormsg\">{errorMessage}</div>}\r\n        </form>\r\n    );\r\n}\r\n\r\nfunction ConfigureGame(props) {\r\n    const num_players = React.useRef(null);\r\n    const hand_size = React.useRef(null);\r\n    const createlobby = React.useRef(null);\r\n    const joinlobby = React.useRef(null);\r\n\r\n    const [numPlayers, setNumPlayers] = useState(2);\r\n    const [handSize, setHandSize] = useState(7)\r\n\r\n    const updateNumPlayers = (rade) => {\r\n        setNumPlayers(rade.target.value);\r\n    };\r\n\r\n    const updateHandSize = (rade) => {\r\n        setHandSize(rade.target.value);\r\n    };\r\n\r\n    const handleCreateGame = async (buttone) => {\r\n        buttone.preventDefault();\r\n        props.onConfig( { // properties\r\n            isCreate: true,\r\n            num_players: parseInt(numPlayers, 10),\r\n            hand_size: parseInt(handSize, 10),\r\n            lobby: createlobby.current.value\r\n        });\r\n    };\r\n\r\n    const handleJoinGame = async (buttone) => {\r\n        buttone.preventDefault();\r\n        props.onConfig( { // properties\r\n            isCreate: false,\r\n            num_players: null, // these are null because it doesn't matter what joining a game will do\r\n            hand_size: null,\r\n            lobby: joinlobby.current.value\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"configure_forms\">\r\n            <h3>Create a game:</h3>\r\n            <form className=\"create_form\" onSubmit={handleCreateGame}>\r\n                <div className=\"login_input\">\r\n                    <label>Number of players: </label>\r\n                    <input ref={num_players} className=\"button_radio\" type=\"radio\" name=\"num_players\" value=\"2\" id=\"numplayers_2\" onChange={updateNumPlayers} required/>\r\n                    <label className=\"label_radio\" htmlFor=\"numplayers_2\">2 </label>\r\n                    <input className=\"button_radio\" type=\"radio\" name=\"num_players\" value=\"3\" id=\"numplayers_3\" onChange={updateNumPlayers} />\r\n                    <label className=\"label_radio\" htmlFor=\"numplayers_3\">3 </label>\r\n                    <input className=\"button_radio\" type=\"radio\" name=\"num_players\" value=\"4\" id=\"numplayers_4\" onChange={updateNumPlayers} />\r\n                    <label className=\"label_radio\" htmlFor=\"numplayers_4\">4 </label>\r\n                    {/* <select name=\"numplayers\" id=\"numplayers_dropdown\">\r\n                        \r\n                        You should either switch to dropdowns\r\n                        fix radio buttons\r\n                        of get a 3rd party library\r\n                        \r\n                    </select> */}\r\n                </div>\r\n                <div className=\"login_input\">\r\n                    <label>Starting Hand Size: </label>\r\n                    <input ref={hand_size} className=\"button_radio\" type=\"radio\" name=\"handsize\" value=\"5\" id=\"handsize_5\" onChange={updateHandSize} required/>\r\n                    <label className=\"label_radio\" htmlFor=\"handsize_5\">5 </label>\r\n                    <input className=\"button_radio\" type=\"radio\" name=\"handsize\" value=\"6\" id=\"handsize_6\" onChange={updateHandSize} />\r\n                    <label className=\"label_radio\" htmlFor=\"handsize_6\">6 </label>\r\n                    <input className=\"button_radio\" type=\"radio\" name=\"handsize\" value=\"7\" id=\"handsize_7\" onChange={updateHandSize} />\r\n                    <label className=\"label_radio\" htmlFor=\"handsize_7\">7 </label>\r\n                    <input className=\"button_radio\" type=\"radio\" name=\"handsize\" value=\"8\" id=\"handsize_8\" onChange={updateHandSize} />\r\n                    <label className=\"label_radio\" htmlFor=\"handsize_8\">8 </label>\r\n                    <input className=\"button_radio\" type=\"radio\" name=\"handsize\" value=\"9\" id=\"handsize_9\" onChange={updateHandSize} />\r\n                    <label className=\"label_radio\" htmlFor=\"handsize_9\">9 </label>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"createlobby_text\">Create lobby: </label>\r\n                    <input ref={createlobby} type=\"text\" id=\"createlobby_text\" name=\"createlobby_text\" pattern=\"^[a-zA-Z0-9]+$\" required/>\r\n                </div>\r\n                <button className=\"button_submit\">Create Game</button>\r\n            </form>\r\n            <hr className=\"create_join_split\"/>\r\n            <h3>Join a game:</h3>\r\n            <form className=\"join_form\" onSubmit={handleJoinGame}>\r\n                <div>\r\n                <label htmlFor=\"joinlobby_text\">Create lobby: </label>\r\n                <input ref={joinlobby} type=\"text\" id=\"joinlobby_text\" name=\"joinlobby_text\" pattern=\"^[a-zA-Z0-9]+$\" required/>\r\n                </div>\r\n                <button className=\"button_submit\">Join Game</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}